<?xml version="1.0" encoding="utf-8"?><testsuite errors="0" failures="1" name="pytest" skips="0" tests="1" time="0.073"><testcase classname="jsabl.tests.test_stdlib_json_ext_protector" file="jsabl/tests/test_stdlib_json_ext_protector.py" line="7" name="test_protection" time="0.0055866241455078125"><failure message="AssertionError: assert &apos;12 is not JSON serializable&apos; == &apos;Object of typ...N serializable&apos;
  - 12 is not JSON serializable
  + Object of type &apos;MyInt&apos; is not JSON serializable">def test_protection():
        &quot;&quot;&quot;Tests that the protection method works&quot;&quot;&quot;
    
        class MyInt(int):
            pass
    
        # create an instance
        i = MyInt(12)
    
        # 1- default json lib behaviour: the int is encoded :(
        std_lib_encoder = JSONEncoder()
        assert std_lib_encoder.encode(i) == &apos;12&apos;
    
        # 2- an encoder for which we add the protection, but not the custom object hook
        dummy_encoder = JSONEncoder()
        add_protection_to_json_encoder(dummy_encoder)
    
        # should raise an error instead of encoding the int
        with pytest.raises(TypeError) as exc_info:
            dummy_encoder.encode(i)
    
        e = exc_info.value
&gt;       assert str(e) == &quot;Object of type &apos;MyInt&apos; is not JSON serializable&quot;
E       AssertionError: assert &apos;12 is not JSON serializable&apos; == &apos;Object of typ...N serializable&apos;
E         - 12 is not JSON serializable
E         + Object of type &apos;MyInt&apos; is not JSON serializable

jsabl/tests/test_stdlib_json_ext_protector.py:30: AssertionError</failure></testcase></testsuite>